services:
  
  otel:
    container_name: otel
    image: otel/opentelemetry-collector-contrib:0.104.0
    command: --config=/etc/otel-collector-config.yaml
    ports:
    - "4317:4317"
    - "8889:8889"
    volumes:
      - ./open-telemetry/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
        - app-network

  elasticsearch:
   container_name: elasticsearch
   image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
   ports:
    - 9200:9200
   volumes:
    - elasticsearch-data:/usr/share/elasticsearch/data
   environment:
    - xpack.security.enabled=false
    - xpack.watcher.enabled=false
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    - discovery.type=single-node
   healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 10s
      timeout: 10s
      retries: 50
   networks:
       - app-network
   restart: always
   deploy:
      resources:
        limits:
          memory: 2000M

  kibana:
   container_name: kibana
   image: docker.elastic.co/kibana/kibana:8.7.1
   ports:
    - 5601:5601
   depends_on:
    - elasticsearch
   environment:
    - ELASTICSEARCH_URL=http://localhost:9200
   healthcheck:
      test: curl -s http://kibana:5601 >/dev/null || exit 1
      interval: 10s
      timeout: 10s
      retries: 50
   networks:
       - app-network
   restart: always
   
  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init-tempo:
    image: grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo-data:/var/tempo

  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo/tempo.yaml:/etc/tempo.yaml
      - tempo-data:/var/tempo
    depends_on:
      - init-tempo
    networks:
      - app-network

  prometheus:
    container_name: prometheus
    image: quay.io/prometheus/prometheus:v2.49.1
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:9090/-/ready
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 5s
    ports:
      - 9090:9090
    networks:
        - app-network
      
  grafana:
    image: grafana/grafana:9.5.17
    ports:
      - "3000:3000"
    volumes:
        - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:3000/api/health
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 5s
    networks:
        - app-network

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    restart: always
    ports:
    - "4369:4369"
    - "5671:5671"
    - "5672:5672"
    - "25672:25672"
    - "15671:15671"
    - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q status && rabbitmq-diagnostics -q check_port_connectivity
      interval: 10s
      timeout: 10s
      retries: 20
    networks:
        - app-network

  mongodb:
    container_name: mongodb
    image: mongo:7.0.16
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - mongodb-data:/data/db
    networks:
        - app-network

  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    environment:
      - ME_CONFIG_MONGODB_URL=mongodb://user:password@mongodb:27017	
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    ports:
      - 8081:8081
    networks:
      - app-network

# API gateway service, along with dapr sidecar
  apigateway:
    container_name: apigateway
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: .
      dockerfile: src/ApiGateway/Dockerfile
    environment:
      - services__catalogservice__http__0=http://catalogservice:8080
      - Dapr__PubSub=pub-sub
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel:4317
      - OTEL_SERVICE_NAME=apigateway
    networks:
        - app-network
    ports:
        - 4000:8080
    depends_on:
      rabbitmq:
        condition: service_healthy

  apigateway-dapr:
    container_name: apigateway-dapr
    image: "daprio/daprd"
    command: [ "./daprd", "-app-id", "apigateway", "-app-port", "8080", "-components-path", "/components",  "-config", "/configuration/config.yaml" ]
    volumes:
      - "./config/dapr/components:/components"
      - "./config/dapr/configuration:/configuration"
    depends_on:
      - apigateway
      - rabbitmq
    network_mode: "service:apigateway"

# Catalog service, along with dapr sidecar
  catalogservice:
    container_name: catalogservice
    image: ${DOCKER_REGISTRY-}catalogservice
    build:
      context: .
      dockerfile: src/CatalogService/Dockerfile
    environment:
      - Dapr__StateStore=state-store
      - Dapr__PubSub=pub-sub
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel:4317
      - OTEL_SERVICE_NAME=catalogservice
    networks:
        - app-network
    ports:
        - 4001:8080
    depends_on:
      rabbitmq:
        condition: service_healthy

  catalogservice-dapr:
    container_name: catalogservice-dapr
    image: "daprio/daprd"
    command: [ "./daprd", "-app-id", "catalogservice", "-app-port", "8080", "-components-path", "/components",  "-config", "/configuration/config.yaml" ]
    volumes:
      - "./config/dapr/components:/components"
      - "./config/dapr/configuration:/configuration"
    depends_on:
      - catalogservice
      - rabbitmq
    network_mode: "service:catalogservice"

networks:
  app-network:

volumes:
  rabbitmq-data:
  mongodb-data:
  elasticsearch-data:
  prometheus-data:
  tempo-data: